// Generated by CoffeeScript 1.4.0
var Entries, Entry, EntryView, EntrylistView, Finder, MorePageView, NavigatorView;

Entry = Backbone.Model.extend({});

Entries = Backbone.Collection.extend({
  model: Entry,
  initialize: function() {
    return _.bindAll(this, 'setUrl');
  },
  setUrl: function(url) {
    this.url = url;
    return this;
  }
});

Finder = Backbone.Model.extend({
  defaults: {
    pageNumber: 1,
    pageSize: 5,
    prevQuery: {},
    predicate: function(query, model) {
      var key, val;
      for (key in query) {
        val = query[key];
        if (val !== model.get(key)) {
          return false;
        }
      }
      return true;
    }
  },
  initialize: function() {
    var filtering, filteringOne, initializePage,
      _this = this;
    filtering = _.bind(this.filtering, this, null, null);
    filteringOne = function(model) {
      return _this.filteringOne(model);
    };
    initializePage = _.bind(this.toPage, this, 1);
    _.bindAll(this, 'load', 'filteringOne', 'filtering', 'hasNextPage', 'hasPrevPage', 'nextPage', 'prevPage', 'morePage', 'toPage', 'pageSizeIsInfinity', 'getMaxPageNumber', 'getPageEntries', '_onCollectionEvent', '_pageAdd');
    if (!this.has('allEntries')) {
      this.set('allEntries', new Entries);
    }
    if (!this.has('filteredEntries')) {
      this.set('filteredEntries', new Entries);
    }
    if (!this.has('selectedEntries')) {
      this.set('selectedEntries', new Entries);
    }
    this.get('allEntries').on("reset", filtering);
    this.get('allEntries').on("add", filteringOne);
    this.get('filteredEntries').on("add", this._pageAdd);
    this.get('filteredEntries').on("reset", initializePage);
    this.get('selectedEntries').on('all', this._onCollectionEvent);
    return this.on("change:pageSize", initializePage);
  },
  load: function(url, options) {
    if (url == null) {
      url = this.get('url');
    }
    if (options == null) {
      options = {};
    }
    if (_.isString(url)) {
      this.get('allEntries').setUrl(url).fetch(options);
    } else if (_.isArray(url || _.isObject(url))) {
      this.get('allEntries').reset(url, options);
    } else {
      throw new Error("Can not load. Invalid argument.");
    }
    this.set('pageNumber', 0, {
      silent: true
    });
    return this.toPage(1);
  },
  filteringOne: function(query, model, predi) {
    var filtered;
    if (query == null) {
      query = this.get('prevQuery');
    }
    if (predi == null) {
      predi = this.get('predicate');
    }
    if (!(model != null)) {
      model = query;
      query = this.get('prevQuery');
    }
    this.set('prevQuery', query);
    predi = _.bind(predi, this, query);
    filtered = this.get('filteredEntries');
    if (predi(model && !filtered.include(model))) {
      filtered.add(model);
    }
    return this;
  },
  filtering: function(query, predi) {
    if (query == null) {
      query = this.get('prevQuery');
    }
    if (predi == null) {
      predi = this.get('predicate');
    }
    predi = _.bind(predi, this, query);
    this.set('prevQuery', query);
    this.get('filteredEntries').reset(this.get('allEntries').filter(predi));
    return this;
  },
  hasNextPage: function() {
    return this.get('pageNumber') < this.getMaxPageNumber();
  },
  hasPrevPage: function() {
    return 1 < this.get('pageNumber');
  },
  nextPage: function() {
    if (!this.hasNextPage()) {
      return this;
    }
    return this.toPage(this.get('pageNumber') + 1);
  },
  prevPage: function() {
    if (!this.hasPrevPage()) {
      return this;
    }
    return this.toPage(this.get('pageNumber') - 1);
  },
  morePage: function() {
    var page;
    if (!this.hasNextPage()) {
      return this;
    }
    page = this.get('pageNumber') + 1;
    this.get('selectedEntries').add(this.getPageEntries(page));
    return this.set('pageNumber', page);
  },
  toPage: function(page) {
    if (_.isString(page)) {
      page = parseInt(pase);
    }
    this.get('selectedEntries').reset(this.getPageEntries(page));
    this.set('pageNumber', page);
    return this.trigger('pageChanged');
  },
  pageSizeIsInfinity: function(pageSize) {
    if (pageSize == null) {
      pageSize = this.get('pageSize');
    }
    return !(pageSize != null) || pageSize <= 0;
  },
  getMaxPageNumber: function() {
    var allSize;
    if (this.pageSizeIsInfinity()) {
      return 1;
    }
    allSize = this.get('filteredEntries').length;
    return Math.ceil(allSize / this.get('pageSize'));
  },
  getPageEntries: function(page) {
    var pageSize, skipSize;
    pageSize = this.get('pageSize');
    if (this.pageSizeIsInfinity(pageSize)) {
      return this.get('filteredEntries').chain().value();
    }
    skipSize = (page - 1) * pageSize;
    return this.get('filteredEntries').chain().tail(skipSize).head(pageSize).value();
  },
  _pageAdd: function(model, collection) {
    var selected;
    selected = this.get('selectedEntries');
    if (selected.length < this.get("pageSize")) {
      return selected.add(model);
    }
  },
  _onCollectionEvent: function(event, model, collection, options) {
    if (event === "add") {
      this.trigger('selected', model, collection, options);
    }
    if (event === "remove") {
      this.trigger('unselected', model, collection, options);
    }
    return this.trigger.apply(this, arguments);
  }
});

EntryView = Backbone.View.extend({
  options: {
    templateSelector: "#entry-view-tmpl"
  },
  initialize: function() {
    _.bindAll(this, 'render', 'getTemplate');
    if (this.options.events != null) {
      this.events = this.options.events;
    }
    return this.template = this.getTemplate();
  },
  render: function() {
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  },
  getTemplate: _.memoize(function(tmpl) {
    if (tmpl == null) {
      tmpl = $(this.options.templateSelector);
    }
    if (tmpl.length === 0) {
      throw new Error("A template does not exist");
    }
    return _.template(tmpl.html());
  })
});

EntrylistView = Backbone.View.extend({
  options: {
    entryView: EntryView,
    containerSelector: ".entry-container",
    onAdd: function(view) {
      return view.$el.stop().css('opacity', 1.0).hide().fadeIn();
    }
  },
  initialize: function(options) {
    if (options == null) {
      options = {};
    }
    _.bindAll(this, "_reset", "_add", "_getView");
    this.$container = this.$(this.options.containerSelector);
    this.model.on("reset", this._reset);
    return this.model.on("add", this._add);
  },
  _reset: function(collection) {
    this.$container.html('');
    return collection.each(this._add);
  },
  _add: function(model, collection) {
    var view;
    view = this._getView(model);
    this.$container.append(view.render().el);
    if (_.isFunction(this.options.onAdd)) {
      return this.options.onAdd(view);
    }
  },
  _getView: _.memoize(function(model) {
    return new this.options.entryView({
      model: model
    });
  }, function(model) {
    return model.id;
  })
});

NavigatorView = Backbone.View.extend({
  options: {
    viewNumber: 5,
    separater: ' | ',
    nextString: '次のページ',
    prevString: '前のページ',
    exString: '...'
  },
  events: {
    "click a.nextlink": '_nextPage',
    "click a.prevlink": '_prevPage',
    "click a.page-jump": '_toPage'
  },
  initialize: function() {
    _.bindAll(this, 'render', '_nextPage', '_prevPage', '_toPage');
    return this.model.on("pageChanged", this.render);
  },
  render: function() {
    var i, maxPage, nowPage, op, _i;
    op = this.options;
    nowPage = this.model.get('pageNumber');
    maxPage = this.model.getMaxPageNumber();
    this.$el.html('');
    if (maxPage <= 1) {
      this.$el.hide();
    } else {
      this.$el.show();
      if (this.model.hasPrevPage()) {
        this.$el.append("<a class='prevlink' href='#prev'>" + op.prevString + "</a><span>" + op.separater + "</span>");
      }
      if (1 < nowPage - op.viewNumber) {
        this.$el.append("<span>" + op.exString + "</span>");
      }
      for (i = _i = 1; 1 <= maxPage ? _i <= maxPage : _i >= maxPage; i = 1 <= maxPage ? ++_i : --_i) {
        if ((nowPage - op.viewNumber <= i && i <= nowPage + op.viewNumber)) {
          if (i === nowPage) {
            this.$el.append("<span>" + i + "</span>");
          } else {
            this.$el.append("<a class='page-jump' href='#to-" + i + "' data-to-page='" + i + "'>" + i + "</a>");
          }
        }
      }
      if (nowPage + op.viewNumber < maxPage) {
        this.$el.append("<span>" + op.exString + "</span>");
      }
      if (this.model.hasNextPage()) {
        this.$el.append(" " + op.separater + " <a class='nextlink' href='#next'>" + op.nextString + "</a>");
      }
    }
    return this;
  },
  _nextPage: function(event) {
    this.model.nextPage();
    return false;
  },
  _prevPage: function(event) {
    this.model.prevPage();
    return false;
  },
  _toPage: function(event) {
    this.model.toPage($(event.currentTarget).data('to-page'));
    return false;
  }
});

MorePageView = Backbone.View.extend({
  events: {
    "click": '_morePage'
  },
  initialize: function() {
    _.bindAll(this, 'render', '_morePage');
    this.model.on("pageChanged", this.render);
    return this.render();
  },
  render: function() {
    if (this.model.get('pageNumber') < this.model.getMaxPageNumber()) {
      return this.$el.show();
    } else {
      return this.$el.hide();
    }
  },
  _morePage: function(event) {
    this.model.morePage();
    return false;
  }
});
